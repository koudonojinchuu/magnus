
# Makefile (make.darter) - Colin Ramsay - 26 Feb 99
#
# Make file for ACE version 3.000.  Works on:
#   darter - PC/i586, Linux 2.0.21, gcc v2.7, (gnu) make 3.73

# Compiler switches
#
# -Wall     : print all warnings
# -pedantic : be bloody picky
# -ansi     : enforce ANSII compliance
# -O2/3     : optimise quite a bit / a lot
# -g        : for xxgdb debugger
# -pg       : profiling info for gprof

CC  = gcc -Wall -pedantic -ansi -O2
#CC = gcc -Wall -pedantic -ansi -O3
#CC = gcc -Wall -pedantic -ansi -g
#CC = gcc -Wall -pedantic -ansi -O2 -pg

# ACE Level 0, 1 & 2 switches 
#
# AL0_STAT   : If defined, include the statistics package.  Usually 
#            : defined.
# AL0_CC     : If defined, include "CC:" / "DD:" messages in the message
# AL0_DD     :   feature.  Usually both on.
# AL1_BINARY : If defined, use 1024 etc instead of 1000 etc for the
#                workspace multipliers.  Usually not defined.
# AL2_HINFO  : Prints host name etc at start of run.  Usually defined.
 
FLAGS  = -DAL2_HINFO -DAL0_STAT -DAL0_CC -DAL0_DD

# Sources

SRC2  = ace.c parser.c postproc.c util2.c
SRC1  = control.c util1.c
SRC0  = coinc.c enum.c util0.c
SRC0A = enum00.c enum01.c enum02.c

# Level 2 (interactive interface)
#
# Note the setting of (THE)DATE, so that we can record the time/date of
# this build in the executable (usage: "fprint(fop, "%s\n", DATE);")

THEDATE := $(shell date)

ace: al2.h $(SRC2) al1.h $(SRC1) al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -DDATE="\"$(THEDATE)\"" -o ace \
		$(SRC2) $(SRC1) $(SRC0)

# Level 1 (core wrapper)

ex1a: ex1a.c al1.h $(SRC1) al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex1a ex1a.c $(SRC1) $(SRC0)

ex1b: ex1b.c al1.h $(SRC1) al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex1b ex1b.c $(SRC1) $(SRC0)

ex1c: ex1c.c al1.h $(SRC1) al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex1c ex1c.c $(SRC1) $(SRC0)

ex1d: ex1d.c al1.h $(SRC1) al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex1d ex1d.c $(SRC1) $(SRC0)

# Level 0 (core enumerator)

ex0a: ex0a.c al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex0a ex0a.c $(SRC0)

ex0b: ex0b.c al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex0b ex0b.c $(SRC0)

ex0c: ex0c.c al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex0c ex0c.c $(SRC0)

ex0d: ex0d.c al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -DRUNA -o ex0d ex0d.c $(SRC0)

