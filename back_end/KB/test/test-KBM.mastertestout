Running rkbp with parameter 10
KBMachine := rec(
           isFSA := true,
        alphabet := rec(
                type := "identifiers",
                size := 4,
                  format := "dense",
                   names := [a,a^-1,b,b^-1]
               ),
          states := rec(
                type := "simple",
                size := 107
               ),
           flags := ["DFA"],
         initial := [1],
       accepting := [1,2,3,5,6,8,9,11,12,14,
        20,21,22,23,24,25,26,31,33,34,
        35,36,37,38,39,41,42,45,46,47,
        48,52,53,54,55,56,57,60,61,65,
        67,70,71,73,75,79,80,82,84,85,
        86,87,88,93,94,96,97,99,100,102],
           table := rec(
      numTransitions := 240,
              format := "dense deterministic",
         transitions := [[2,31,70,79],
                         [3,19,20,79],
                         [3,19,4,5],
                         [0,0,0,0],
                         [6,18,92,93],
                         [81,19,7,8],
                         [0,0,0,0],
                         [9,17,92,93],
                         [81,19,10,11],
                         [0,0,0,0],
                         [12,16,92,93],
                         [81,19,13,14],
                         [0,0,0,0],
                         [80,15,92,93],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [71,21,30,78],
                         [32,74,22,67],
                         [66,23,29,78],
                         [32,74,24,67],
                         [66,25,28,78],
                         [32,74,26,67],
                         [66,73,27,78],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [32,33,65,67],
                         [0,0,0,0],
                         [32,33,34,64],
                         [66,35,52,78],
                         [32,74,36,51],
                         [66,37,45,78],
                         [32,74,38,44],
                         [66,39,41,78],
                         [32,74,65,40],
                         [0,0,0,0],
                         [76,42,77,78],
                         [32,74,65,43],
                         [0,0,0,0],
                         [0,0,0,0],
                         [76,46,77,78],
                         [32,74,47,50],
                         [66,48,75,78],
                         [32,74,65,49],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [76,53,77,78],
                         [32,74,54,63],
                         [66,55,60,78],
                         [32,74,56,59],
                         [66,57,75,78],
                         [32,74,65,58],
                         [0,0,0,0],
                         [0,0,0,0],
                         [76,61,77,78],
                         [32,74,65,62],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [66,73,75,78],
                         [0,0,0,0],
                         [68,82,92,69],
                         [0,0,0,0],
                         [0,0,0,0],
                         [71,73,75,78],
                         [72,19,20,79],
                         [0,0,0,0],
                         [32,74,65,67],
                         [0,0,0,0],
                         [76,73,77,78],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [80,82,92,93],
                         [81,19,20,79],
                         [0,0,0,0],
                         [32,83,84,67],
                         [0,0,0,0],
                         [66,85,91,78],
                         [32,74,86,67],
                         [66,87,90,78],
                         [32,74,88,67],
                         [66,73,89,78],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [94,106,92,107],
                         [81,19,95,96],
                         [0,0,0,0],
                         [97,105,92,93],
                         [81,19,98,99],
                         [0,0,0,0],
                         [100,104,92,93],
                         [81,19,101,102],
                         [0,0,0,0],
                         [80,103,92,93],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0]
                   ]
               )
);
a*a*b ->b^-1*b^-1 
a*a*b^-1*a*b ->b^-1*a*b^-1*b^-1 
a*a*b^-1*a*b^-1*a*b ->b^-1*a*b^-1*a*b^-1*b^-1 
a*a*b^-1*a*b^-1*a*b^-1*a*b ->b^-1*a*b^-1*a*b^-1*a*b^-1*b^-1 
a*a*b^-1*a*b^-1*a*b^-1*a*b^-1*a^-1 ->b^-1*a*b^-1*a*b^-1*a*b^-1*a 
a*a*b^-1*a*b^-1*a*b^-1*a^-1 ->b^-1*a*b^-1*a*b^-1*a 
a*a*b^-1*a*b^-1*a^-1 ->b^-1*a*b^-1*a 
a*a*b^-1*a^-1 ->b^-1*a 
a*a^-1 ->1 
a*b*a^-1*b*a^-1*b*a^-1*b*b ->a^-1*b*a^-1*b*a^-1*b*a^-1*b^-1 
a*b*a^-1*b*a^-1*b*b ->a^-1*b*a^-1*b*a^-1*b^-1 
a*b*a^-1*b*b ->a^-1*b*a^-1*b^-1 
a*b*b ->a^-1*b^-1 
a^-1*a ->1 
a^-1*a^-1*b*a^-1*b*a^-1*b*a^-1*b^-1 ->b*a^-1*b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b*a^-1*b*b*a^-1*b^-1 ->b*a^-1*b*a^-1*b*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b*a^-1*b^-1 ->b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b*b*a^-1*b*a^-1*b^-1 ->b*a^-1*b*b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b*b*a^-1*b^-1 ->b*a^-1*b*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b^-1 ->b*a^-1*b*b 
a^-1*a^-1*b*b*a^-1*b*a^-1*b*a^-1*b^-1 ->b*b*a^-1*b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*b*a^-1*b*a^-1*b^-1 ->b*b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*b*a^-1*b*b*a^-1*b^-1 ->b*b*a^-1*b*b*a^-1*b*b 
a^-1*a^-1*b*b*a^-1*b^-1 ->b*b*a^-1*b*b 
a^-1*a^-1*b^-1 ->b*b 
a^-1*b*a ->a*b*a^-1 
a^-1*b^-1*a ->a*b^-1*a^-1 
a^-1*b^-1*b^-1 ->a*b 
b*a*a ->b^-1*b^-1 
b*a^-1*a^-1 ->a^-1*a^-1*b 
b*b*a ->b^-1*a^-1 
b*b*b ->a^-1*a^-1 
b*b^-1 ->1 
b^-1*a*a ->a*a*b^-1 
b^-1*a^-1*a^-1 ->b*b 
b^-1*a^-1*b*a^-1*b*a^-1*b*b ->b*b*a^-1*b*a^-1*b*a^-1*b^-1 
b^-1*a^-1*b*a^-1*b*b ->b*b*a^-1*b*a^-1*b^-1 
b^-1*a^-1*b*b ->b*b*a^-1*b^-1 
b^-1*b ->1 
b^-1*b^-1*a*b ->b*a*b^-1*b^-1 
b^-1*b^-1*a*b^-1*a*b ->b*a*b^-1*a*b^-1*b^-1 
b^-1*b^-1*a*b^-1*a*b^-1*a*b ->b*a*b^-1*a*b^-1*a*b^-1*b^-1 
b^-1*b^-1*a*b^-1*a*b^-1*a*b^-1*a^-1 ->b*a*b^-1*a*b^-1*a*b^-1*a 
b^-1*b^-1*a*b^-1*a*b^-1*a^-1 ->b*a*b^-1*a*b^-1*a 
b^-1*b^-1*a*b^-1*a^-1 ->b*a*b^-1*a 
b^-1*b^-1*a^-1 ->b*a 
b^-1*b^-1*b^-1 ->a*a 
 fsa {
	 states 60
	 symbols 4
	 variables 1 
	 no_eos
	 alphabet {
1 = a 2 = a^-1 3 = b 4 = b^-1 }
	 start { 1 }

%
atable
	1 A  2 18 42 46;
	2 A  3 -9 11 46;
	3 A  3 -9 -1 4;
	4 A  5 -8 -39 54;
	5 A  -34 -9 -2 6;
	6 A  7 -7 -39 54;
	7 A  -34 -9 -3 8;
	8 A  9 -6 -39 54;
	9 A  -34 -9 -4 10;
	10 A  47 -5 -39 54;
	11 A  43 12 -13 -33;
	12 A  -14 -30 13 41;
	13 A  -26 14 -12 -33;
	14 A  -14 -30 15 41;
	15 A  -26 16 -11 -33;
	16 A  -14 -30 17 41;
	17 A  -26 44 -10 -33;
	18 A  -14 19 40 41;
	19 A  -14 19 20 -25;
	20 A  -26 21 32 -33;
	21 A  -14 -30 22 -20;
	22 A  -26 23 28 -33;
	23 A  -14 -30 24 -17;
	24 A  -26 25 26 -33;
	25 A  -14 -30 40 -15;
	26 A  -31 27 -32 -33;
	27 A  -14 -30 40 -16;
	28 A  -31 29 -32 -33;
	29 A  -14 -30 30 -19;
	30 A  -26 31 45 -33;
	31 A  -14 -30 40 -18;
	32 A  -31 33 -32 -33;
	33 A  -14 -30 34 -24;
	34 A  -26 35 38 -33;
	35 A  -14 -30 36 -22;
	36 A  -26 37 45 -33;
	37 A  -14 -30 40 -21;
	38 A  -31 39 -32 -33;
	39 A  -14 -30 40 -23;
	40 A  -26 44 45 -33;
	41 A  -27 48 -39 -28;
	42 A  43 44 45 -33;
	43 A  -29 -9 11 46;
	44 A  -14 -30 40 41;
	45 A  -31 44 -32 -33;
	46 A  47 48 -39 54;
	47 A  -34 -9 11 46;
	48 A  -14 -35 49 41;
	49 A  -26 50 -38 -33;
	50 A  -14 -30 51 41;
	51 A  -26 52 -37 -33;
	52 A  -14 -30 53 41;
	53 A  -26 44 -36 -33;
	54 A  55 -46 -39 -47;
	55 A  -34 -9 -40 56;
	56 A  57 -45 -39 54;
	57 A  -34 -9 -41 58;
	58 A  59 -44 -39 54;
	59 A  -34 -9 -42 60;
	60 A  47 -43 -39 54;
}

rels {
a*a*b  > b^-1*b^-1 
a*a*b^-1*a*b  > b^-1*a*b^-1*b^-1 
a*a*b^-1*a*b^-1*a*b  > b^-1*a*b^-1*a*b^-1*b^-1 
a*a*b^-1*a*b^-1*a*b^-1*a*b  > b^-1*a*b^-1*a*b^-1*a*b^-1*b^-1 
a*a*b^-1*a*b^-1*a*b^-1*a*b^-1*a^-1  > b^-1*a*b^-1*a*b^-1*a*b^-1*a 
a*a*b^-1*a*b^-1*a*b^-1*a^-1  > b^-1*a*b^-1*a*b^-1*a 
a*a*b^-1*a*b^-1*a^-1  > b^-1*a*b^-1*a 
a*a*b^-1*a^-1  > b^-1*a 
a*a^-1  > epsilon
a*b*a^-1*b*a^-1*b*a^-1*b*b  > a^-1*b*a^-1*b*a^-1*b*a^-1*b^-1 
a*b*a^-1*b*a^-1*b*b  > a^-1*b*a^-1*b*a^-1*b^-1 
a*b*a^-1*b*b  > a^-1*b*a^-1*b^-1 
a*b*b  > a^-1*b^-1 
a^-1*a  > epsilon
a^-1*a^-1*b*a^-1*b*a^-1*b*a^-1*b^-1  > b*a^-1*b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b*a^-1*b*b*a^-1*b^-1  > b*a^-1*b*a^-1*b*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b*a^-1*b^-1  > b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b*b*a^-1*b*a^-1*b^-1  > b*a^-1*b*b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b*b*a^-1*b^-1  > b*a^-1*b*b*a^-1*b*b 
a^-1*a^-1*b*a^-1*b^-1  > b*a^-1*b*b 
a^-1*a^-1*b*b*a^-1*b*a^-1*b*a^-1*b^-1  > b*b*a^-1*b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*b*a^-1*b*a^-1*b^-1  > b*b*a^-1*b*a^-1*b*b 
a^-1*a^-1*b*b*a^-1*b*b*a^-1*b^-1  > b*b*a^-1*b*b*a^-1*b*b 
a^-1*a^-1*b*b*a^-1*b^-1  > b*b*a^-1*b*b 
a^-1*a^-1*b^-1  > b*b 
a^-1*b*a  > a*b*a^-1 
a^-1*b^-1*a  > a*b^-1*a^-1 
a^-1*b^-1*b^-1  > a*b 
b*a*a  > b^-1*b^-1 
b*a^-1*a^-1  > a^-1*a^-1*b 
b*b*a  > b^-1*a^-1 
b*b*b  > a^-1*a^-1 
b*b^-1  > epsilon
b^-1*a*a  > a*a*b^-1 
b^-1*a^-1*a^-1  > b*b 
b^-1*a^-1*b*a^-1*b*a^-1*b*b  > b*b*a^-1*b*a^-1*b*a^-1*b^-1 
b^-1*a^-1*b*a^-1*b*b  > b*b*a^-1*b*a^-1*b^-1 
b^-1*a^-1*b*b  > b*b*a^-1*b^-1 
b^-1*b  > epsilon
b^-1*b^-1*a*b  > b*a*b^-1*b^-1 
b^-1*b^-1*a*b^-1*a*b  > b*a*b^-1*a*b^-1*b^-1 
b^-1*b^-1*a*b^-1*a*b^-1*a*b  > b*a*b^-1*a*b^-1*a*b^-1*b^-1 
b^-1*b^-1*a*b^-1*a*b^-1*a*b^-1*a^-1  > b*a*b^-1*a*b^-1*a*b^-1*a 
b^-1*b^-1*a*b^-1*a*b^-1*a^-1  > b*a*b^-1*a*b^-1*a 
b^-1*b^-1*a*b^-1*a^-1  > b*a*b^-1*a 
b^-1*b^-1*a^-1  > b*a 
b^-1*b^-1*b^-1  > a*a 
}
Enter word to be reduced (terminated with a comma).
a^4 rewrites using index automaton as a^4
 and using rkbp as a^4
Enter word to be reduced (terminated with a comma).
b^4 rewrites using index automaton as a^-2 b
 and using rkbp as a^-2 b
Enter word to be reduced (terminated with a comma).
b^5 rewrites using index automaton as a^-2 b^2
 and using rkbp as a^-2 b^2
Enter word to be reduced (terminated with a comma).
a b^4 rewrites using index automaton as a^-1 b
 and using rkbp as a^-1 b
Enter word to be reduced (terminated with a comma).
a b a b^3 rewrites using index automaton as a b a^-1
 and using rkbp as a b a^-1
Enter word to be reduced (terminated with a comma).
a b a b^4 rewrites using index automaton as a b a^-1 b
 and using rkbp as a b a^-1 b
Enter word to be reduced (terminated with a comma).
a^10 rewrites using index automaton as a^10
 and using rkbp as a^10
Enter word to be reduced (terminated with a comma).
b^10 rewrites using index automaton as a^-6 b
 and using rkbp as a^-6 b
Enter word to be reduced (terminated with a comma).
b^11 rewrites using index automaton as a^-6 b^2
 and using rkbp as a^-6 b^2
Enter word to be reduced (terminated with a comma).
a b a b a b rewrites using index automaton as a b a b a b
 and using rkbp as a b a b a b
Enter word to be reduced (terminated with a comma).
1
Running rkbp with parameter 8
KBMachine := rec(
           isFSA := true,
        alphabet := rec(
                type := "identifiers",
                size := 4,
                  format := "dense",
                   names := [a,a^-1,b,b^-1]
               ),
          states := rec(
                type := "simple",
                size := 12
               ),
           flags := ["DFA"],
         initial := [1],
       accepting := [1,2,5,9],
           table := rec(
      numTransitions := 16,
              format := "dense deterministic",
         transitions := [[2,4,5,9],
                         [3,4,5,9],
                         [0,0,0,0],
                         [0,0,0,0],
                         [6,4,7,8],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [10,4,11,12],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0]
                   ]
               )
);
a*a ->1 
a^-1 ->a 
b*a ->a*b 
b*b ->b^-1 
b*b^-1 ->1 
b^-1*a ->a*b^-1 
b^-1*b ->1 
b^-1*b^-1 ->b 
 fsa {
	 states 4
	 symbols 4
	 variables 1 
	 no_eos
	 alphabet {
1 = a 2 = a^-1 3 = b 4 = b^-1 }
	 start { 1 }

%
atable
	1 A  2 -2 3 4;
	2 A  -1 -2 3 4;
	3 A  -3 -2 -4 -5;
	4 A  -6 -2 -7 -8;
}

rels {
a*a  > epsilon
a^-1  > a 
b*a  > a*b 
b*b  > b^-1 
b*b^-1  > epsilon
b^-1*a  > a*b^-1 
b^-1*b  > epsilon
b^-1*b^-1  > b 
}
Enter word to be reduced (terminated with a comma).
a^4 rewrites using index automaton as 1
 and using rkbp as 1
Enter word to be reduced (terminated with a comma).
b^4 rewrites using index automaton as b
 and using rkbp as b
Enter word to be reduced (terminated with a comma).
b^5 rewrites using index automaton as b^-1
 and using rkbp as b^-1
Enter word to be reduced (terminated with a comma).
a b^4 rewrites using index automaton as a b
 and using rkbp as a b
Enter word to be reduced (terminated with a comma).
a b a b^3 rewrites using index automaton as b
 and using rkbp as b
Enter word to be reduced (terminated with a comma).
a b a b^4 rewrites using index automaton as b^-1
 and using rkbp as b^-1
Enter word to be reduced (terminated with a comma).
a^10 rewrites using index automaton as 1
 and using rkbp as 1
Enter word to be reduced (terminated with a comma).
b^10 rewrites using index automaton as b
 and using rkbp as b
Enter word to be reduced (terminated with a comma).
b^11 rewrites using index automaton as b^-1
 and using rkbp as b^-1
Enter word to be reduced (terminated with a comma).
a b a b a b rewrites using index automaton as a
 and using rkbp as a
Enter word to be reduced (terminated with a comma).
1
Running rkbp with parameter 8
KBMachine := rec(
           isFSA := true,
        alphabet := rec(
                type := "identifiers",
                size := 4,
                  format := "dense",
                   names := [a,a^-1,b,b^-1]
               ),
          states := rec(
                type := "simple",
                size := 13
               ),
           flags := ["DFA"],
         initial := [1],
       accepting := [1,2,4,6,10],
           table := rec(
      numTransitions := 20,
              format := "dense deterministic",
         transitions := [[2,4,6,10],
                         [2,3,6,10],
                         [0,0,0,0],
                         [5,4,6,10],
                         [0,0,0,0],
                         [7,8,6,9],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0],
                         [11,12,13,10],
                         [0,0,0,0],
                         [0,0,0,0],
                         [0,0,0,0]
                   ]
               )
);
a*a^-1 ->1 
a^-1*a ->1 
b*a ->a*b 
b*a^-1 ->a^-1*b 
b*b^-1 ->1 
b^-1*a ->a*b^-1 
b^-1*a^-1 ->a^-1*b^-1 
b^-1*b ->1 
 fsa {
	 states 5
	 symbols 4
	 variables 1 
	 no_eos
	 alphabet {
1 = a 2 = a^-1 3 = b 4 = b^-1 }
	 start { 1 }

%
atable
	1 A  2 3 4 5;
	2 A  2 -1 4 5;
	3 A  -2 3 4 5;
	4 A  -3 -4 4 -5;
	5 A  -6 -7 -8 5;
}

rels {
a*a^-1  > epsilon
a^-1*a  > epsilon
b*a  > a*b 
b*a^-1  > a^-1*b 
b*b^-1  > epsilon
b^-1*a  > a*b^-1 
b^-1*a^-1  > a^-1*b^-1 
b^-1*b  > epsilon
}
Enter word to be reduced (terminated with a comma).
a^4 rewrites using index automaton as a^4
 and using rkbp as a^4
Enter word to be reduced (terminated with a comma).
b^4 rewrites using index automaton as b^4
 and using rkbp as b^4
Enter word to be reduced (terminated with a comma).
b^5 rewrites using index automaton as b^5
 and using rkbp as b^5
Enter word to be reduced (terminated with a comma).
a b^4 rewrites using index automaton as a b^4
 and using rkbp as a b^4
Enter word to be reduced (terminated with a comma).
a b a b^3 rewrites using index automaton as a^2 b^4
 and using rkbp as a^2 b^4
Enter word to be reduced (terminated with a comma).
a b a b^4 rewrites using index automaton as a^2 b^5
 and using rkbp as a^2 b^5
Enter word to be reduced (terminated with a comma).
a^10 rewrites using index automaton as a^10
 and using rkbp as a^10
Enter word to be reduced (terminated with a comma).
b^10 rewrites using index automaton as b^10
 and using rkbp as b^10
Enter word to be reduced (terminated with a comma).
b^11 rewrites using index automaton as b^11
 and using rkbp as b^11
Enter word to be reduced (terminated with a comma).
a b a b a b rewrites using index automaton as a^3 b^3
 and using rkbp as a^3 b^3
Enter word to be reduced (terminated with a comma).
1
